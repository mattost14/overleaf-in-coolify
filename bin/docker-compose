#! /usr/bin/env bash
# shellcheck source-path=..

set -euo pipefail

#### Detect Toolkit Project Root ####
# if realpath is not available, create a semi-equivalent function
command -v realpath >/dev/null 2>&1 || realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
TOOLKIT_ROOT="$(realpath "$SCRIPT_DIR/..")"
if [[ ! -d "$TOOLKIT_ROOT/bin" ]] || [[ ! -d "$TOOLKIT_ROOT/config" ]]; then
  echo "ERROR: could not find root of overleaf-toolkit project (inferred project root as '$TOOLKIT_ROOT')"
  exit 1
fi

source "$TOOLKIT_ROOT/lib/shared-functions.sh"

function __main__() {
  # Load the Overleaf version
  read_image_version

  # Load vars from the rc file
  read_config

  # Select which docker-compose files to load
  local compose_file_flags=("-f $TOOLKIT_ROOT/lib/docker-compose.base.yml")
  if [[ $REDIS_ENABLED == "true" ]]; then
    compose_file_flags+=("-f $TOOLKIT_ROOT/lib/docker-compose.redis.yml")
  fi
  if [[ $MONGO_ENABLED == "true" ]]; then
    compose_file_flags+=("-f $TOOLKIT_ROOT/lib/docker-compose.mongo.yml")
    if [[ $IMAGE_VERSION_MAJOR -ge 4 ]]; then
      MONGO_ARGS="--replSet overleaf"
    else
      MONGO_ARGS=""
    fi
  fi
  if [[ $SIBLING_CONTAINERS_ENABLED == "true" ]]; then
    compose_file_flags+=("-f $TOOLKIT_ROOT/lib/docker-compose.sibling-containers.yml")
  fi
  if [[ $NGINX_ENABLED == "true" ]]; then
    compose_file_flags+=("-f $TOOLKIT_ROOT/lib/docker-compose.nginx.yml")
  fi
  if [[ $GIT_BRIDGE_ENABLED == "true" ]]; then
    if [[ $SERVER_PRO = "true" && $IMAGE_VERSION_MAJOR -ge 4 ]]; then
      compose_file_flags+=("-f $TOOLKIT_ROOT/lib/docker-compose.git-bridge.yml")
      GIT_BRIDGE_IMAGE="quay.io/sharelatex/git-bridge:$IMAGE_VERSION"
    else
      # Git bridge is only supported in Server Pro 4+
      GIT_BRIDGE_ENABLED=false
    fi
  fi

  # Include docker-compose.override.yml if it is present
  if [[ -f "$TOOLKIT_ROOT/config/docker-compose.override.yml" ]]; then
    compose_file_flags+=("-f $TOOLKIT_ROOT/config/docker-compose.override.yml")
  fi

  local image_name="sharelatex/sharelatex"
  if [[ $SERVER_PRO == "true" ]]; then
    image_name="quay.io/sharelatex/sharelatex-pro"
  fi
  image_name="${SHARELATEX_IMAGE_NAME:-${image_name}}"

  local full_image_spec="$image_name:$IMAGE_VERSION"

  # Canonicalize data paths
  SHARELATEX_DATA_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$SHARELATEX_DATA_PATH")
  MONGO_DATA_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$MONGO_DATA_PATH")
  REDIS_DATA_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$REDIS_DATA_PATH")
  GIT_BRIDGE_DATA_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$GIT_BRIDGE_DATA_PATH")

  if [[ ${SHARELATEX_LISTEN_IP:-null} == "null" ]];
  then
    echo "WARNING: the value of SHARELATEX_LISTEN_IP is not set in config/overleaf.rc. This value must be set to the public IP address for direct container access. Defaulting to 0.0.0.0" >&2
    SHARELATEX_LISTEN_IP="0.0.0.0"
  fi

  if [[ $NGINX_ENABLED == "true" ]]; then
    if [[ -n ${TLS_PRIVATE_KEY_PATH-} ]]; then
      TLS_PRIVATE_KEY_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$TLS_PRIVATE_KEY_PATH")
    fi
    if [[ -n ${TLS_CERTIFICATE_PATH-} ]]; then
      TLS_CERTIFICATE_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$TLS_CERTIFICATE_PATH")
    fi
    if [[ -n ${NGINX_CONFIG_PATH-} ]]; then
      NGINX_CONFIG_PATH=$(cd "$TOOLKIT_ROOT"; realpath "$NGINX_CONFIG_PATH")
    fi
  fi
  # Print debug info
  if [[ ${RC_DEBUG:-null} != "null" ]]; then
    echo ">>>>>>VARS>>>>>>"
    echo "$(set -o posix; set)" # print all vars
    echo "IMAGE_VERSION=$IMAGE_VERSION"
    echo "<<<<<<<<<<<<<<<<"
    echo ">>>>COMPOSE-ARGS>>>>"
    echo "-p $PROJECT_NAME"
    echo "${compose_file_flags[@]}"
    echo "$@"
    echo "<<<<<<<<<<<<<<<<<<<<"
  fi

  # Export vars for use in docker-compose files
  export DOCKER_SOCKET_PATH
  export GIT_BRIDGE_DATA_PATH
  export GIT_BRIDGE_ENABLED
  export GIT_BRIDGE_IMAGE
  export IMAGE="$full_image_spec"
  export MONGO_ARGS
  export MONGO_DATA_PATH
  export MONGO_IMAGE
  export MONGO_URL
  export NGINX_CONFIG_PATH
  export NGINX_IMAGE
  export NGINX_HTTP_PORT
  export NGINX_HTTP_LISTEN_IP
  export NGINX_TLS_LISTEN_IP
  export REDIS_DATA_PATH
  export REDIS_HOST
  export REDIS_IMAGE
  export REDIS_PORT
  export SHARELATEX_DATA_PATH
  export SHARELATEX_PORT
  export SHARELATEX_LISTEN_IP
  export TLS_CERTIFICATE_PATH
  export TLS_PORT
  export TLS_PRIVATE_KEY_PATH

  # shellcheck disable=SC2068
  exec docker-compose -p "$PROJECT_NAME" ${compose_file_flags[@]} "$@"
}

__main__ "$@"
